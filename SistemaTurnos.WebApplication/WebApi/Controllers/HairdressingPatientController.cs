using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SistemaTurnos.Commons.Authorization;
using SistemaTurnos.Commons.Exceptions;
using SistemaTurnos.Database;
using SistemaTurnos.Database.Enums;
using SistemaTurnos.WebApplication.WebApi.Dto.Email;
using SistemaTurnos.Database.HairdressingModel;
using SistemaTurnos.Database.Model;
using SistemaTurnos.WebApplication.WebApi.Dto;
using SistemaTurnos.WebApplication.WebApi.Dto.HairdressingPatient;
using SistemaTurnos.WebApplication.WebApi.Dto.Patient;
using SistemaTurnos.WebApplication.WebApi.Dto.Record;
using SistemaTurnos.WebApplication.WebApi.Services;
using System.Net.Mail;

namespace SistemaTurnos.WebApplication.WebApi.Controllers
{
    [Route("Api/Hairdressing/[controller]/[action]")]
    [Produces("application/json")]
    [EnableCors("AnyOrigin")]
    [Authorize(Roles = Roles.AdministratorAndEmployee)]
    public class HairdressingPatientController : Controller
    {
        public BusinessPlaceService _service;

        private readonly UserManager<ApplicationUser> _userManager;

        private readonly EmailService _emailService;
        private readonly RoleManager<ApplicationRole> _roleManager;

        public HairdressingPatientController(UserManager<ApplicationUser> userManager, RoleManager<ApplicationRole> roleManager)
        {
            _userManager = userManager;
            _roleManager = roleManager;
            _emailService = new EmailService();
            _service = new BusinessPlaceService();
        }

        [HttpPost]
        public ActionResult Add([FromBody] AddHairdressingPatientDto patientDto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var client = dbContext.Clients.FirstOrDefault(c => c.Id == patientDto.ClientId);

                dbContext.Hairdressing_Patients.Add(new Hairdressing_Patient
                {
                    
                    UserId = userId,
                    ClientId = patientDto.ClientId
                });

                var id = dbContext.SaveChanges();

                watch.Stop();
                var elapsedMs = watch.ElapsedMilliseconds;
                Console.WriteLine("HairdressingPatient/Add milisegundos: " + elapsedMs);

                return Ok(id);
            }
        }

        [HttpPost]
        public void AddForNonClient([FromBody] AddHairdressingPatientForNonClientDto patientDto)
        {
            var emailMessage = new EmailDto();
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                if (dbContext.Users.Any(u => u.UserName == patientDto.Username))
                {
                    throw new ApplicationException(ExceptionMessages.UsernameAlreadyExists);
                }

                var userId = _service.GetUserId(HttpContext);

                if (!_roleManager.RoleExistsAsync(Roles.Client).Result)
                {
                    throw new ApplicationException(ExceptionMessages.InternalServerError);
                }

                var email = "";
                var phone = "";
                try
                {
                    new MailAddress(patientDto.Username);
                    email = patientDto.Username;
                    phone = "11111111";
                }
                catch
                {
                    phone = patientDto.Username;
                    email = phone +"@autogenerated.com";
                }

                var user = new ApplicationUser
                {
                    UserName = patientDto.Username,
                    Email = email,
                    PhoneNumber = phone
                };

                var result = _userManager.CreateAsync(user, patientDto.Password).Result;


                if (!result.Succeeded)
                {
                    throw new ApplicationException(ExceptionMessages.UsernameAlreadyExists);
                }

                result = _userManager.AddToRoleAsync(user, Roles.Client).Result;

                if (!result.Succeeded)
                {
                    throw new ApplicationException(ExceptionMessages.InternalServerError);
                }

                var client = new SystemClient
                {
                    UserId = user.Id,
                    Logo = "",
                    FirstName = patientDto.FirstName,
                    LastName = patientDto.LastName,
                    Address = patientDto.Address
                };
                dbContext.Clients.Add(client);
                dbContext.SaveChanges();

                var patient = new Hairdressing_Patient
                {
                    
                    UserId = userId,
                    ClientId = client.Id
                };

                dbContext.Hairdressing_Patients.Add(patient);
                dbContext.SaveChanges();


                string template = "<html lang='en'> <head> <meta charset='UTF-8'> <meta http-equiv='X-UA-Compatible' content='IE=edge'> <meta name='viewport' content='width=device-width, initial-scale=1'> <title>Mail cancelación</title> </head> <body> <table style='max-width: 600px; width:100%;height: 100vh;margin:auto;border-spacing: 0px;'> <thead> <tr style='height:65px;background-color: #373fc2;'> <th><img src='http://todoreservas.com.ar/panel/assets/img/logo.jpg' alt='Todo Reservas'></th> </tr> </thead> <tbody> <tr style='height: 167px;background-color: #454edb;display: block;'> <th style='width: 100%;display: block;'> <span style='font-family: Roboto;font-size: 25px;font-weight: 400;font-style: normal;font-stretch: normal;line-height: 1.2;letter-spacing: normal;text-align: center;color: #ffffff;display: block;padding-bottom:10px;padding-top: 25px;'>¡Felicitaciones!</span> <span style='font-family: Roboto;font-size: 16px;font-weight: 100;font-style: normal;font-stretch: normal;line-height: 1.2;letter-spacing: normal;text-align: center;color: #ffffff;display: block;'>Su registro se ha realizado con éxito</span> </th> <th style='display: block; margin: auto;'> <img src='http://todoreservas.com.ar/panel/assets/img/usercuadrado.png' height='111' width='111' alt='Ticket' style='padding-top: 20px;'> </th> </tr> <tr style='display: block;border-left: 1px solid #cccccc; border-right: 1px solid #cccccc;padding-bottom: 50px;'> <th style='width: 100%;display: block;padding-top: 115px;'> <span style='font-family: Roboto;font-size: 14px;font-weight: 600;font-style: normal;font-stretch: normal;line-height: 1.14;letter-spacing: normal;text-align: center;color: #060706;display: block;'>¡Ya puede acceder a su cuenta y comenzar a disfrutar!</span> <span style='font-family: Roboto;font-size: 14px; font-weight: 300; font-style: normal; font-stretch: normal; line-height: 1.14;letter-spacing: normal;text-align: center;color: #060706;display: block;padding-top:10px'></span> <span style='display: block;padding-top: 40px;'><a href='http://todoreservas.com.ar/' style='font-family: Roboto;font-size: 12px;font-weight: 500;font-style: normal;font-stretch: normal;line-height: 30px;letter-spacing: normal;text-align: center;color: #ffffff;height: 30px;border-radius: 15px;background-color: #00b900;display:inline-block;padding: 0px 10px;text-decoration: none;'>INICIAR SESIÓN</a></span> </th> </tr> <tr style='display: block; padding-top: 30px;padding-bottom: 30px;border: 1px solid #ccc;'> <th style='width:100%;text-align:center;display: block;'> <span style='font-family: Roboto;font-size: 12.5px;font-weight: 300;font-style: normal;font-stretch: normal;line-height: 1.17;letter-spacing: normal;text-align: center;color: #060706;padding-right: 10px;'>¿Tiene dudas?</span> <span style='border-radius: 13px;border: 1px solid #030303;padding:3px 10px;'><a href='http://todoreservas.com.ar/preguntasFrecuentes' style='font-family: Roboto;font-size: 11px;font-weight: 300;font-style: normal;font-stretch: normal;line-height: 1.2;letter-spacing: normal;text-align: center;color: #030303;text-decoration: none'>CENTRO DE AYUDA</a></span> </th> </tr> </tbody> </table> </body></html>";
                
                emailMessage = new EmailDto
                {
                    From = "no-reply@todoreservas.com.ar",
                    Subject = "Turno reservado",
                    To = new List<string> { patientDto.Username },
                    Message = template
                };


            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            _emailService.Send(emailMessage);
            Console.WriteLine("HairdressingPatient/AddForNonClient milisegundos: " + elapsedMs);
        }

        [HttpGet]
        public List<HairdressingPatientDto> GetAll()
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var res = dbContext.Hairdressing_Patients
                    .Where(p => p.UserId == userId)
                    .Select(s => new HairdressingPatientDto
                    {
                        Id = s.Id,
                        FirstName = s.Client.FirstName,
                        LastName = s.Client.LastName,
                        Address = s.Client.Address,
                        Username = s.Client.PhoneNumber,
                        UserId = s.UserId,
                        ClientId = s.ClientId,
                        ReservedAppointments = s.Appointments.Count(),
                        ConcretedAppointments = s.Appointments.Count(a => a.State == AppointmentStateEnum.Completed)
                    }).ToList();

                watch.Stop();
                var elapsedMs = watch.ElapsedMilliseconds;
                Console.WriteLine("HairdressingPatient/GetAll milisegundos: " + elapsedMs);

                return res;
            }
        }

        [HttpPost]
        public void Remove([FromBody] RemoveHairdressingPatientDto patientDto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var patientToDelete = dbContext.Hairdressing_Patients.FirstOrDefault(p => p.Id == patientDto.Id && p.UserId == userId);

                if (patientToDelete == null)
                {
                    throw new BadRequestException();
                }

                dbContext.Entry(patientToDelete).State = EntityState.Deleted;
                dbContext.SaveChanges();
            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            Console.WriteLine("HairdressingPatient/Remove milisegundos: " + elapsedMs);
        }

        [HttpPost]
        public void Edit([FromBody] EditHairdressingPatientDto patientDto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var patientToUpdate = dbContext.Hairdressing_Patients.FirstOrDefault(p => p.Id == patientDto.Id && p.UserId == userId);

                if (patientToUpdate == null)
                {
                    throw new BadRequestException();
                }

                patientToUpdate.Client.FirstName = patientDto.FirstName;
                patientToUpdate.Client.LastName = patientDto.LastName;
                patientToUpdate.Client.Address = patientDto.Address;
                patientToUpdate.Client.PhoneNumber = patientDto.PhoneNumber;
                dbContext.SaveChanges();
            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            Console.WriteLine("HairdressingPatient/Edit milisegundos: " + elapsedMs);
        }

        [HttpPost]
        public List<HairdressingPatientDto> GetByFilter([FromBody] FilterHairdressingPatientDto filter)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var res = dbContext.Hairdressing_Patients
                    .Where(p => p.UserId == userId)
                    .Where(p => string.IsNullOrWhiteSpace(filter.Text) || p.Client.FullName.ToLower().Contains(filter.Text.ToLower()) || p.Client.User.Email.ToLower().Contains(filter.Text.ToLower()))
                    .Select(s => new HairdressingPatientDto()
                    {
                        Id = s.Id,
                        FirstName = s.Client.FirstName,
                        LastName = s.Client.LastName,
                        Address = s.Client.Address,
                        Username = s.Client.User.UserName,
                        UserId = s.UserId,
                        ClientId = s.ClientId,
                        ReservedAppointments = s.Appointments.Count(),
                        ConcretedAppointments = s.Appointments.Count(a => a.State == AppointmentStateEnum.Completed)
                    }).ToList();

                watch.Stop();
                var elapsedMs = watch.ElapsedMilliseconds;
                Console.WriteLine("HairdressingPatient/GetByFilter milisegundos: " + elapsedMs);

                return res;
            }
        }

        [HttpPost]
        public void AddRecord([FromBody] RecordDto dto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var patient = dbContext.Hairdressing_Patients.FirstOrDefault(p => p.UserId == userId && p.Id == dto.Id);

                if (patient == null)
                {
                    throw new BadRequestException();
                }

                patient.Records.Add(new Hairdressing_Record
                {
                    DateTime = dto.DateTime,
                    Description = dto.Description,
                    PatientId = dto.Id
                });

                dbContext.SaveChanges();
            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            Console.WriteLine("HairdressingPatient/AddRecord milisegundos: " + elapsedMs);
        }

        [HttpPost]
        public void EditRecord([FromBody] RecordDto dto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var record = dbContext.Hairdressing_Records.FirstOrDefault(r => r.Id == dto.Id && r.Patient.UserId == userId);

                if (record == null)
                {
                    throw new BadRequestException();
                }

                record.DateTime = dto.DateTime;
                record.Description = dto.Description;
                dbContext.SaveChanges();
            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            Console.WriteLine("HairdressingPatient/EditRecord milisegundos: " + elapsedMs);
        }

        [HttpPost]
        public void RemoveRecord([FromBody] IdDto dto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var record = dbContext.Hairdressing_Records.FirstOrDefault(r => r.Id == dto.Id && r.Patient.UserId == userId);

                if (record == null)
                {
                    throw new BadRequestException();
                }

                dbContext.Entry(record).State = EntityState.Deleted;
                dbContext.SaveChanges();
            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            Console.WriteLine("HairdressingPatient/RemoveRecord milisegundos: " + elapsedMs);
        }

        [HttpPost]
        public List<RecordDto> GetRecords([FromBody] IdDto dto)
        {
            var watch = Stopwatch.StartNew();

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);

                var patient = dbContext.Hairdressing_Patients.FirstOrDefault(p => p.Id == dto.Id);

                if (patient == null)
                {
                    throw new BadRequestException();
                }

                var res = patient.Records.Select(r => new RecordDto
                {
                    Id = r.Id,
                    Description = r.Description,
                    DateTime = r.DateTime
                })
                .OrderByDescending(r => r.DateTime)
                .ToList();

                watch.Stop();
                var elapsedMs = watch.ElapsedMilliseconds;
                Console.WriteLine("HairdressingPatient/GetRecords milisegundos: " + elapsedMs);

                return res;
            }
        }

        [HttpPost]
        public UserDataDto Search([FromBody] SearchPatientDto dto)
        {
            var watch = Stopwatch.StartNew();

            var res = new UserDataDto();

            res.IsClient = false;
            res.IsPatient = false;

            using (var dbContext = new ApplicationDbContext())
            {
                var userId = _service.GetUserId(HttpContext);
                var client = dbContext.Clients.FirstOrDefault(c => c.User.UserName == dto.User);
                var patient = dbContext.Hairdressing_Patients.FirstOrDefault(p => (p.Client.User.UserName == dto.User) && p.UserId == userId);

                if (client != null)
                {
                    res.IsClient = true;
                    res.ClientId = client.Id;
                    res.FirstName = client.FirstName;
                    res.LastName = client.LastName;
                    res.Address = client.Address;
                    res.Username = client.User.UserName;
                }

                if (patient != null)
                {
                    res.IsPatient = true;
                    res.PatientId = patient.Id;
                }

            }

            watch.Stop();
            var elapsedMs = watch.ElapsedMilliseconds;
            Console.WriteLine("PatientController/Search milisegundos: " + elapsedMs);

            return res;
        }

        private SystemClient CreateClient(string email, string password, AddHairdressingPatientDto patientDto)
        {
            using (var dbContext = new ApplicationDbContext())
            {
                if (dbContext.Clients.Any(c => c.User.UserName == patientDto.Username))
                {
                    throw new ApplicationException(ExceptionMessages.UsernameAlreadyExists);
                }

                if (!_roleManager.RoleExistsAsync(Roles.Client).Result)
                {
                    throw new ApplicationException(ExceptionMessages.InternalServerError);
                }

                var user = new ApplicationUser
                {
                    UserName = email,
                    Email = email
                };

                var result = _userManager.CreateAsync(user, password).Result;

                if (!result.Succeeded)
                {
                    throw new ApplicationException(ExceptionMessages.UsernameAlreadyExists);
                }
            
                var appUser = _userManager.Users.SingleOrDefault(au => au.Email == email);

                result = _userManager.AddToRoleAsync(appUser, Roles.Client).Result;

                if (!result.Succeeded)
                {
                    throw new ApplicationException(ExceptionMessages.InternalServerError);
                }

                var client = new SystemClient
                {
                    UserId = appUser.Id,
                    FirstName = patientDto.FirstName,
                    LastName = patientDto.LastName,
                    Address = patientDto.Address,
                };

                dbContext.Clients.Add(client);
                dbContext.SaveChanges();

                return dbContext.Clients.FirstOrDefault(c => c.UserId == appUser.Id);
            }
        }
    }
}
